version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: travel_safe_shield_db
    environment:
      POSTGRES_DB: travel_safe_shield
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - travel_safe_shield_network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: travel_safe_shield_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - travel_safe_shield_network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: travel_safe_shield_backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/travel_safe_shield
      REDIS_URL: redis://redis:6379
      PORT: 3001
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      FRONTEND_URL: http://localhost:5173
      ADMIN_URL: http://localhost:3000
      # Add other environment variables as needed
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    networks:
      - travel_safe_shield_network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads

  # Frontend (if you want to run it in Docker)
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: travel_safe_shield_frontend
    environment:
      VITE_API_URL: http://localhost:3001
      VITE_WS_URL: ws://localhost:3001
    ports:
      - "5173:5173"
    depends_on:
      - backend
    networks:
      - travel_safe_shield_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: travel_safe_shield_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - travel_safe_shield_network
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: travel_safe_shield_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - travel_safe_shield_network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: travel_safe_shield_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - travel_safe_shield_network
    restart: unless-stopped

  # Job Queue Monitor (Bull Board)
  bull-board:
    build:
      context: .
      dockerfile: Dockerfile.bull-board
    container_name: travel_safe_shield_bull_board
    environment:
      REDIS_URL: redis://redis:6379
    ports:
      - "3002:3002"
    depends_on:
      - redis
    networks:
      - travel_safe_shield_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  travel_safe_shield_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
